/**    * @Title: ZipUtils.java  * @Package org.guoguo.util  * @Description: TODO(用一句话描述该文件做什么)  * @author 蒋金豪 jjhhappy@sina.com    * @date 2014-10-28 下午9:42:30  * @version V1.0    */package com.zc.degou.server.tool;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.security.InvalidAlgorithmParameterException;import java.security.InvalidKeyException;import java.security.Key;import java.security.NoSuchAlgorithmException;import java.security.NoSuchProviderException;import java.security.Security;import java.util.zip.GZIPInputStream;import java.util.zip.GZIPOutputStream;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import java.util.zip.ZipOutputStream;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import org.bouncycastle.jce.provider.BouncyCastleProvider;import com.rt.BASE64Decoder;import com.rt.BASE64Encoder;/** * @ClassName: ZipUtils * @Description: TODO(这里用一句话描述这个类的作用) * @author 蒋金豪 jjhhappy@sina.com * @date 2014-10-28 下午9:42:30 *  */public class ZipUtils {	/**	 * 	 * 使用gzip进行压缩	 */	public static String gzip(String primStr) {		if (primStr == null || primStr.length() == 0) {			return primStr;		}		ByteArrayOutputStream out = new ByteArrayOutputStream();		GZIPOutputStream gzip = null;		try {			gzip = new GZIPOutputStream(out);			gzip.write(primStr.getBytes());		} catch (IOException e) {			e.printStackTrace();		} finally {			if (gzip != null) {				try {					gzip.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}		return new BASE64Encoder().encode(out.toByteArray());	}	@SuppressWarnings("restriction")	public static String gzip(byte[] primStr) {		if (primStr == null || primStr.length == 0) {			return primStr.toString();		}		ByteArrayOutputStream out = new ByteArrayOutputStream();		GZIPOutputStream gzip = null;		try {			gzip = new GZIPOutputStream(out);			gzip.write(primStr);		} catch (IOException e) {			e.printStackTrace();		} finally {			if (gzip != null) {				try {					gzip.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}		return new BASE64Encoder().encode(out.toByteArray());	}	/**	 * 	 * <p>	 * Description:使用gzip进行解压缩	 * </p>	 * 	 * @param compressedStr	 * @return	 */	public static String gunzip(String compressedStr) {		if (compressedStr == null) {			return null;		}		ByteArrayOutputStream out = new ByteArrayOutputStream();		ByteArrayInputStream in = null;		GZIPInputStream ginzip = null;		byte[] compressed = null;		String decompressed = null;		try {			compressed = new BASE64Decoder().decodeBuffer(compressedStr);			in = new ByteArrayInputStream(compressed);			ginzip = new GZIPInputStream(in);			byte[] buffer = new byte[1024];			int offset = -1;			while ((offset = ginzip.read(buffer)) != -1) {				out.write(buffer, 0, offset);			}			decompressed = out.toString();		} catch (IOException e) {			e.printStackTrace();		} finally {			if (ginzip != null) {				try {					ginzip.close();				} catch (IOException e) {				}			}			if (in != null) {				try {					in.close();				} catch (IOException e) {				}			}			if (out != null) {				try {					out.close();				} catch (IOException e) {				}			}		}		return decompressed;	}	/**	 * 使用zip进行压缩	 * 	 * @param str	 *            压缩前的文本	 * @return 返回压缩后的文本	 */	public static final String zip(String str) {		if (str == null)			return null;		byte[] compressed;		ByteArrayOutputStream out = null;		ZipOutputStream zout = null;		String compressedStr = null;		try {			out = new ByteArrayOutputStream();			zout = new ZipOutputStream(out);			zout.putNextEntry(new ZipEntry("0"));			zout.write(str.getBytes());			zout.closeEntry();			compressed = out.toByteArray();			compressedStr = new BASE64Encoder().encodeBuffer(compressed);		} catch (IOException e) {			compressed = null;		} finally {			if (zout != null) {				try {					zout.close();				} catch (IOException e) {				}			}			if (out != null) {				try {					out.close();				} catch (IOException e) {				}			}		}		return compressedStr;	}	/**	 * 使用zip进行解压缩	 * 	 * @param compressed	 *            压缩后的文本	 * @return 解压后的字符串	 */	public static final String unzip(String compressedStr) {		if (compressedStr == null) {			return null;		}		ByteArrayOutputStream out = null;		ByteArrayInputStream in = null;		ZipInputStream zin = null;		String decompressed = null;		try {			byte[] compressed = new BASE64Decoder().decodeBuffer(compressedStr);			out = new ByteArrayOutputStream();			in = new ByteArrayInputStream(compressed);			zin = new ZipInputStream(in);			zin.getNextEntry();			byte[] buffer = new byte[1024];			int offset = -1;			while ((offset = zin.read(buffer)) != -1) {				out.write(buffer, 0, offset);			}			decompressed = out.toString();		} catch (IOException e) {			decompressed = null;		} finally {			if (zin != null) {				try {					zin.close();				} catch (IOException e) {				}			}			if (in != null) {				try {					in.close();				} catch (IOException e) {				}			}			if (out != null) {				try {					out.close();				} catch (IOException e) {				}			}		}		return decompressed;	}	public static String encode(String data) throws NoSuchAlgorithmException,			NoSuchProviderException, NoSuchPaddingException,			InvalidKeyException, InvalidAlgorithmParameterException,			IllegalBlockSizeException, BadPaddingException {		Security.addProvider(new BouncyCastleProvider());		Key key = new SecretKeySpec("hm.9986@xxsc~dig".getBytes(), "AES");		Cipher in = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");		byte[] iv = "1234567890123456".getBytes();		in.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));		byte[] enc = in.doFinal(data.getBytes());		System.out.println("Encrypted Content:");		return new BASE64Encoder().encode(enc);	}}