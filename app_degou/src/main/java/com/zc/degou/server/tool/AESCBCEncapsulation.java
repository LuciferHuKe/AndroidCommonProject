package com.zc.degou.server.tool;import java.security.InvalidAlgorithmParameterException;import java.security.InvalidKeyException;import java.security.Key;import java.security.NoSuchAlgorithmException;import java.security.NoSuchProviderException;import java.security.Security;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import org.bouncycastle.jce.provider.BouncyCastleProvider;import com.rt.BASE64Decoder;import com.rt.BASE64Encoder;/** * @author carlos carlosk@163.com * @version 创建时间：2012-5-17 上午9:48:35 类说明 */public class AESCBCEncapsulation {	/**	 * 加密方法	 * 	 * @param data	 * @return	 * @throws NoSuchAlgorithmException	 * @throws NoSuchProviderException	 * @throws NoSuchPaddingException	 * @throws InvalidKeyException	 * @throws InvalidAlgorithmParameterException	 * @throws IllegalBlockSizeException	 * @throws BadPaddingException	 */	public static String encode(String data) throws NoSuchAlgorithmException,			NoSuchProviderException, NoSuchPaddingException,			InvalidKeyException, InvalidAlgorithmParameterException,			IllegalBlockSizeException, BadPaddingException {		Security.addProvider(new BouncyCastleProvider());		Key key = new SecretKeySpec("hm.9986@xxsc~dig".getBytes(), "AES");		Cipher in = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");		byte[] iv = "1234567890123456".getBytes();		in.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));		byte[] enc = in.doFinal(data.getBytes());		return new BASE64Encoder().encode(enc);	}	/**	 * 解密方法	 * 	 * @param data	 * @return	 */	public static String decode(String data) {		if (null == data) {			return "";		}		try {			Security.addProvider(new BouncyCastleProvider());			Key key = new SecretKeySpec("hm.9986@xxsc~dig".getBytes(), "AES");			Cipher in = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");			byte[] iv = "1234567890123456".getBytes();			in.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));			byte[] enc = in.doFinal(new BASE64Decoder().decodeBuffer(data));			return new String(enc);		} catch (Exception e) {			// TODO: handle exception			return "";		}	}	public static void main(String[] args) {		try {			System.out.println(encode("1234"));		} catch (Exception e) {			e.printStackTrace();		}	}}